RULESET.special_order_screen = COMPONENT
	title = "Decker - Thrifty Electronics"
	width = 300
	height = 200
	
	// type list
	type_scrollpane = SCROLLPANE
		x = 20
		y = 61
		width = 80     //  = 600
		height = 34 + 17
		vertical_scrollbar = createSimpleScrollbar(true, "blue")
	
	// class list
	class_scrollpane = SCROLLPANE
		x = 120
		y = 61
		width = 100     //  = 600
		height = 34 + 17
		vertical_scrollbar = createSimpleScrollbar(true, "blue")
	
	// level list
	level_scrollpane = SCROLLPANE
		x = 240
		y = 61
		width = 40     //  = 600
		height = 34 + 17
		vertical_scrollbar = createSimpleScrollbar(true, "blue")
			
	LOCAL.type_table_button_x = ARRAY
		type_scrollpane.x
		type_scrollpane.y
		
	LOCAL.class_table_button_x = ARRAY
		class_scrollpane.x
		class_scrollpane.y
		
	LOCAL.level_table_button_x = ARRAY
		level_scrollpane.x
		level_scrollpane.y
			
	LOCAL.createTableButton = FUNCTION (_column, _text, _width, _x, _sorting_order_function)
		return_value = BORDER_BUTTON
			x = _x[0]
			y = _x[1] - 20
			idle = createText(_text)
			idle.height = 14
			width = _width
			height = 20
			_x[0] = _x[0] + _width
			sorting_order_function = _sorting_order_function
			column = _column
			on_mouse_up = FUNCTION
				sortTableInShop(special_order_screen.type_scrollpane.displayed_element, sorting_order_function, column, player.shop_inventory)
	
	purchase_button = BORDER_BUTTON
		x = COMPONENT.width*37/100
		y = COMPONENT.height - 28
		v_align = CENTER
		h_align = CENTER
		height = 24
		idle = createText("Purchase")
		width = pixelwidth(idle)*13/10
		text_padding = 3
		on_mouse_up = FUNCTION
		
	cancel_button = BORDER_BUTTON
		x = COMPONENT.width*64/100
		y = COMPONENT.height - 28
		v_align = CENTER
		h_align = CENTER
		height = 24
		idle = createText("Cancel")
		width = pixelwidth(idle)*13/10
		text_padding = 3
		on_mouse_up = FUNCTION
			displayScreen(shop_screen, false)

	component = ARRAY
		SCREEN_BACKGROUND
		createText("Special Orders", CENTER, 16)
		purchase_button
		cancel_button
		type_scrollpane
		class_scrollpane
		level_scrollpane
		
		// the tables
		createBorder(type_scrollpane.x-2, type_scrollpane.y-22, type_scrollpane.width+4, type_scrollpane.height+24, TABLE_BACKGROUND_COLOR, true)
		createBorder(class_scrollpane.x-2, class_scrollpane.y-22, class_scrollpane.width+4, class_scrollpane.height+24, TABLE_BACKGROUND_COLOR, true)
		createBorder(level_scrollpane.x-2, level_scrollpane.y-22, level_scrollpane.width+4, level_scrollpane.height+24, TABLE_BACKGROUND_COLOR, true)
		
		createTableButton(0, "Type", 80, type_table_button_x, compareText)
		createTableButton(0, "Class", 100, class_table_button_x, compareText)
		createTableButton(0, "Level", 40, level_table_button_x, compareText)
		
	displayContractDescription = FUNCTION
		with special_order_screen
			LOCAL.r = type_scrollpane.displayed_element.selected_row
			if !( r >= 0 )
				description_type_scrollpane.displayed_element = UNDEFINED
				left_button_wrapper.component = UNDEFINED
				center_button_wrapper.component = UNDEFINED
			else
				LOCAL.m = player.mission_list[r]
				description_type_scrollpane.displayed_element = TEXTBLOCK
					width = description_type_scrollpane.width
					if value_type(m.description) == "ARRAY"
						component = m.description
					else
						component = ARRAY
							m.title
							NEWLINE
							m.description
					if m.add_details_to_description
						component[] = " " + generateMissionDetailsDescription(m)
				if m.accepted
					if left_button_wrapper.component.idle.text != "Start"
						left_button_wrapper.component = BORDER_BUTTON
							y = CENTER
							idle = createText("Start")
							padding = 3
							padding_left = 6
							padding_right = 6
							on_mouse_up = FUNCTION
								LOCAL.m = contract_screen.list_type_scrollpane.displayed_element.selected_row
								if m >= 0 && m < player.mission_list.size
									m = player.mission_list[m]
								startMission(m)
					center_button_wrapper.component = UNDEFINED
				else
					if left_button_wrapper.component.idle.text != "Accept and start"
						left_button_wrapper.component = BORDER_BUTTON
							y = CENTER
							idle = createText("Accept and start")
							padding = 3
							padding_left = 6
							padding_right = 6
							on_mouse_up = FUNCTION
								LOCAL.m = contract_screen.list_type_scrollpane.displayed_element.selected_row
								if m >= 0 && m < player.mission_list.size
									m = player.mission_list[m]
									m.accepted = true
									if value_type(m.on_accepted) == "FUNCTION"
										m.accepted(m)
									// just checking in case the on_accepted trigger has moved us to some other screen
									if displayed_screen == contract_screen
										startMission(m)
					if left_button_wrapper.component.idle.text != "Accept"
						center_button_wrapper.component = BORDER_BUTTON
							x = CENTER
							y = CENTER
							idle = createText("Accept")
							padding = 3
							padding_left = 6
							padding_right = 6
							on_mouse_up = FUNCTION
								LOCAL.m = contract_screen.list_type_scrollpane.displayed_element.selected_row
								if m >= 0 && m < player.mission_list.size
									m = player.mission_list[m]
									m.accepted = true
									if value_type(m.on_accepted) == "FUNCTION"
										m.accepted(m)
									if displayed_screen == contract_screen
										contract_screen.setup()
		
	setup = FUNCTION
		with special_order_screen
			// create the table with the missions
			LOCAL.t = createTable( , 19, 120, 80, 160, 80, 80, 80)
			t.cell_x = createArray (3, CENTER, CENTER, CENTER, CENTER, CENTER)
			t.cell_y = CENTER
			t.selected_row_background = TABLE_SELECTED_ROW_BACKGROUND
			t.can_drag_rows = true
			t.selected_row = type_scrollpane.displayed_element.selected_row
			t.on_row_dragged = FUNCTION (table, old_row_index, new_row_index)
				// rearrange the player's mission list accordingly
				LOCAL.p = player.mission_list
				LOCAL.backup = p[old_row_index]
				if old_row_index > new_row_index
					for i = old_row_index downto new_row_index+1
						p[i] = p[i-1]
				else
					for i = old_row_index to new_row_index-1
						p[i] = p[i+1]
				p[new_row_index] = backup
			t.on_selection_change = contract_screen.displayContractDescription

			LOCAL.m = player.mission_list
			if m.size > 0
				for i = 0 to m.size-1
					// generate the details text
					LOCAL.target_count = 0
					LOCAL.no_red_alarm = false
					LOCAL.time_restriction = false
					// there's either one goal or an array of goals
					LOCAL.goal = m[i].goal
					if value_type(goal) != "ARRAY"
						if goal.structure_type == "NO_RED_ALARM"
							no_red_alarm = true
						else if goal.structure_type == "TIME_RESTRICTION"
							time_restriction = true
					else
						target_count = goal.size
						for j = goal.size-1 downto 0
							if goal[j].structure_type == "NO_RED_ALARM" || goal[j].structure_type == "CREATE_BACKDOOR" || goal[j].structure_type == "CRASH_SYSTEM" || goal[j].structure_type == "TIME_RESTRICTION"
								if goal[j].structure_type == "NO_RED_ALARM"
									no_red_alarm = true
								else if goal[j].structure_type == "TIME_RESTRICTION"
									time_restriction = true
								target_count = target_count - 1
					LOCAL.details = (no_red_alarm?"N":"") + (time_restriction?"T":"") + (target_count>1?"("+target_count+")":"")
					details = m[i].target_system.rating + (indexof(m[i].target_system,player.backdoors)>=0?"B":"") + (details==""?"":" " + details)
					// create the table row for the mission
					addTableRow(t, createTableText(m[i].title), createTableText(m[i].rating), createTableText(details), createTableText(m[i].deadline), createTableText(m[i].payment), m[i].accepted?createTableText("yes"):UNDEFINED)
				// always have a mission marked, if the list is not empty
				if list_type_scrollpane.displayed_element.selected_row != UNDEFINED
					t.selected_row = list_type_scrollpane.displayed_element.selected_row
				if value_type(t.selected_row) != "INTEGER" || t.selected_row < 0
					t.selected_row = 0
				if t.selected_row >= m.size
					t.selected_row = m.size-1
			list_type_scrollpane.displayed_element = t
			displayContractDescription()